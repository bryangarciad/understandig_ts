{"version":3,"sources":["src/20-working_with_enums.ts"],"names":[],"mappings":"cAAA;AACA;;AAEA,IAAK,IAAL;;AAAA,CAAA,UAAK,IAAL,EAAS;EACP,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAK,IAAI,KAAJ,IAAI,GAAA,EAAA,CAAT,GAIE;;;AAEF,IAAM,OAAO,GAKT;EACF,IAAI,EAAE,QADJ;EAEF,GAAG,EAAE,EAFH;EAGF,OAAO,EAAE,CAAC,QAAD,EAAW,YAAX,CAHP;EAIF,IAAI,EAAE,IAAI,CAAC,KAJT,CAIiB;;AAJjB,CALJ;AAYA,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,MAAjB,GAA0B;;AAG1B;;;AAEA,IAAK,KAAL;;AAAA,CAAA,UAAK,KAAL,EAAU;EACR,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAK,KAAK,KAAL,KAAK,GAAA,EAAA,CAAV;AAMA;;;;AAEA,IAAK,KAAL;;AAAA,CAAA,UAAK,KAAL,EAAU;EACR,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAA;EACA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,GAAA,CAAA,GAAA,WAAA;EACA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAK,KAAK,KAAL,KAAK,GAAA,EAAA,CAAV;AAMA;;;;;AAGA,IAAK,KAAL;;AAAA,CAAA,UAAK,KAAL,EAAU;EACR,KAAA,CAAA,OAAA,CAAA,GAAA,aAAA;EACA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,GAAA,CAAA,GAAA,WAAA;EACA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAK,KAAK,KAAL,KAAK,GAAA,EAAA,CAAV,GAMA;;;AACA,IAAM,MAAM,GAMR;EACF,IAAI,EAAE,QADJ;EAEF,GAAG,EAAE,EAFH;EAGF,OAAO,EAAE,CAAC,QAAD,EAAW,YAAX,CAHP;EAIF,IAAI,EAAE,CAAC,CAAD,EAAI,UAAJ;AAJJ,CANJ","file":"20-working_with_enums.a0d762f0.js","sourceRoot":"..","sourcesContent":["// Enum only exists in TS\n// enum {NEW,OLD}\n\nenum Role {\n  ADMIN,\n  READ_ONLY,\n  AUTHOR,\n} // Upper case is for standard but not a must\n\nconst person2: {\n  name: string;\n  age: number;\n  hobbies: string[];\n  role: number; // enum assign numbers to identifiers\n} = {\n  name: \"ramses\",\n  age: 27,\n  hobbies: [\"coding\", \"videogames\"],\n  role: Role.ADMIN,  // 0\n};\n\nconsole.log(Role.AUTHOR); // this prints 0 in console\n\n\n/* You can assign your own values to ENUMS, in the example bellow ADMIN will take 5 an the next\nelements will take id incrementing the previus element, therefore, READ_ONLY will take 6 an so only */\nenum Role2 {\n  ADMIN = 5,\n  READ_ONLY,\n  AUTHOR,\n} \n\n/* You can assign your own values to ENUMS to all elements, in the example bellow first two elements have\n own id's but AUTHOR is not so will take it incrementally based on his previus element taking 201 */\nenum Role3 {\n  ADMIN = 100,\n  READ_ONLY = 200,\n  AUTHOR,\n} \n\n/* You can assign your own values to ENUMS with STRINGS, but TS will not know how to assign next elements\n therefore you'll must assign either id's manually and allow TS to continue incrementally or assing id \n to all elements */\nenum Role4 {\n  ADMIN = \"STRING MOFO\",\n  READ_ONLY = 200,\n  AUTHOR,\n} \n\n// example with touple\nconst person: {\n  // explicit assignment I could use interfaces\n  name: string;\n  age: number;\n  hobbies: string[];\n  role: [number, string]; // touple\n} = {\n  name: \"ramses\",\n  age: 27,\n  hobbies: [\"coding\", \"videogames\"],\n  role: [1, \"engineer\"],\n};"]}